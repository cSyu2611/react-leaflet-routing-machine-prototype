{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["mapConfig","tap","zoom","minZoom","maxZoom","center","lat","lng","gestureHandling","preferCanvas","zoomControl","scrollWheelZoom","doubleClickZoom","baseLayers","name","attribution","url","checked","RoutingMachine","props","map","useMap","useEffect","L","Routing","control","waypoints","addTo","RoutingMachineController","useState","setWaypoints","search","setSearch","mapRef","useMapEvents","click","e","dblclick","latlng","alliedForces","layerGroup","console","log","clearLayers","latLng","style","position","width","minHeight","background","zIndex","margin","borderWidth","color","border","borderRadius","height","fontSize","textAlign","display","verticalAlign","borderBottom","waypoint","idx","length","type","value","onClick","fontWeight","window","location","reload","App","MapContainer","id","LayersControl","layer","BaseLayer","key","toString","TileLayer","ScaleControl","ZoomControl","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dfdc2ac7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport L from 'leaflet'\nimport {\n  MapContainer,\n  ZoomControl,\n  ScaleControl,\n  LayersControl,\n  TileLayer,\n  useMap,\n  useMapEvents\n} from 'react-leaflet'\n\nconst mapConfig = {\n  tap: false,\n  zoom: 14,\n  minZoom: 6,\n  maxZoom: 17,\n  center: {\n    lat: 35.6802117,\n    lng: 139.7576692\n  },\n  gestureHandling: true,\n  preferCanvas: true,\n  zoomControl: false,\n  scrollWheelZoom: true,\n  doubleClickZoom: false,\n  baseLayers: [\n    {\n      name: \"OpenStreetMap\",\n      attribution: '&copy; <a href=\"//osm.org/copyright\">OpenStreetMap</a> contributors',\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      checked: true\n    },\n    {\n      name: \"国土地理院 - 淡色\",\n      attribution: \"<a href='https://maps.gsi.go.jp/development/ichiran.html' target='_blank'>地理院タイル</a>\",\n      url: \"https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png\",\n      checked: false\n    },\n    {\n      name: \"国土地理院 - 標準地図\",\n      attribution: \"&copy; <a href='https://maps.gsi.go.jp/development/ichiran.html' target='_blank'>地理院タイル</a>\",\n      url: \"//cyberjapandata.gsi.go.jp/xyz/std/{z}/{x}/{y}.png\",\n      checked: false\n    },\n  ]\n} // マップの設定\n\nconst RoutingMachine = props => {\n  const map = useMap();\n  useEffect(() => {\n    L.Routing.control({\n      waypoints: props.waypoints\n    }).addTo(map);\n  }, [])\n  return null;\n}\n\nconst RoutingMachineController = props => {\n  const [waypoints, setWaypoints] = useState([]);\n  const [search, setSearch] = useState(false);\n  const mapRef = useMap();\n  const map = useMapEvents({\n    click: (e) => {\n      ;\n    },\n    dblclick: (e) => {\n      let latlng = e.latlng;\n      let alliedForces = L.layerGroup().addTo(mapRef)\n      console.log(alliedForces)\n      alliedForces.clearLayers()\n      setWaypoints([...waypoints, L.latLng(latlng.lat, latlng.lng)]);\n    }\n  })\n  return (\n    <>\n      {search ? <RoutingMachine waypoints={waypoints} /> : null}\n      <div style={{\n        position: \"absolute\",\n        width: 400,\n        minHeight: 100,\n        background: \"#fff\",\n        zIndex: 500,\n        margin: 20,\n        borderWidth: 10,\n        color: \"#e2e2e2\",\n        border: \"dashed\",\n        borderRadius: 10\n      }}>\n        <div style={{\n          height: 50,\n          width: 400,\n          fontSize: 18,\n          color: \"black\",\n          textAlign: \"center\",\n          display: \"table-cell\",\n          verticalAlign: \"middle\",\n          borderBottom: \"dashed\",\n        }}>\n          React Leaflet + Leaflet Routing Machine\n        </div>\n        <p style={{ height: 0 }}></p>\n        <div style={{\n          height: 30,\n          width: 400,\n          fontSize: 15,\n          color: \"black\",\n          textAlign: \"center\",\n          display: \"table-cell\",\n          verticalAlign: \"middle\"\n        }}>\n          地図上をダブルクリックして通過点を追加できます。\n        </div>\n        <p style={{ height: 0 }}></p>\n        {waypoints.map((waypoint, idx) => (\n          <>\n            <div style={{\n              height: 30,\n              width: 400,\n              textAlign: \"center\",\n              display: \"table-cell\",\n              verticalAlign: \"middle\"\n            }}>{\"緯度: \" + waypoint.lat + \", 経度: \" + waypoint.lng}</div>\n            <p style={{ height: 0 }}></p>\n          </>\n        ))}\n        {waypoints.length >= 2 ?\n          <div style={{\n            height: 40,\n            textAlign: \"center\"\n          }}>\n            <button type=\"button\" name=\"clearButton\" value=\"clear\" style={{\n              background: \"#4186F4\",\n              height: 30,\n              width: 200,\n              borderRadius: 20\n            }}\n              onClick={() => setSearch(true)}>\n              <font style={{\n                fontWeight: \"bold\",\n                color: \"white\"\n              }}>経路を探索する</font>\n            </button>\n          </div> : null}\n\n        <div style={{\n          height: 40,\n          textAlign: \"center\"\n        }}>\n          <button type=\"button\" name=\"clearButton\" value=\"clear\" style={{\n            background: \"#4186F4\",\n            height: 30,\n            width: 200,\n            borderRadius: 20\n          }}\n            onClick={() => { setWaypoints([]); window.location.reload() }}>\n            <font style={{\n              fontWeight: \"bold\",\n              color: \"white\"\n            }}>経路をクリア</font>\n          </button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst App = () => {\n  return (\n    <MapContainer\n      tap={mapConfig.tap}\n      id=\"map\"\n      minZoom={mapConfig.minZoom}\n      zoom={mapConfig.zoom}\n      maxZoom={mapConfig.maxZoom}\n      center={mapConfig.center}\n      gestureHandling={mapConfig.gestureHandling}\n      preferCanvas={mapConfig.preferCanvas}\n      zoomControl={mapConfig.zoomControl}\n      scrollWheelZoom={mapConfig.scrollWheelZoom}\n      doubleClickZoom={mapConfig.doubleClickZoom}\n    >\n      {/* 右上のレイヤコントローラ */}\n      <LayersControl position=\"topright\">\n        {mapConfig.baseLayers.map((layer, idx) => (\n          <LayersControl.BaseLayer checked={layer.checked} name={layer.name} key={layer.name + idx.toString()} zIndex={0}>\n            <TileLayer\n              attribution={layer.attribution}\n              url={layer.url}\n              zIndex={0}\n            />\n          </LayersControl.BaseLayer>\n        ))}\n      </LayersControl>\n      {/* 右上のレイヤコントローラ */}\n\n      {/* 左下の縮尺 */}\n      <ScaleControl position=\"bottomleft\" />\n      {/* 左下の縮尺 */}\n\n      {/* 右下のズームコントローラ */}\n      <ZoomControl position=\"bottomright\" />\n      {/* 右下のズームコントローラ */}\n\n      <RoutingMachineController />\n    </MapContainer>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"leaflet/dist/leaflet.css\"\nimport \"leaflet-routing-machine/dist/leaflet-routing-machine.css\"\nimport \"leaflet-routing-machine\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}